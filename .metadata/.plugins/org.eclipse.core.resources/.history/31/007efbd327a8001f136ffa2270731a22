package com.rest.user.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.rest.user.model.Usuario;
import com.rest.user.service.UsuarioService;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;





@RequestMapping("api/usuario")
@RestController
public class UsuarioController {
	
	@Autowired
	UsuarioService uService;
	
	@GetMapping("/listar/Usuario")
	public List<Usuario> listarUsuario(){
		return uService.listarUsuario();
	}
	
	@PostMapping("/crear/Usuario")
	public void crearUsuario(@RequestBody Usuario usuario) {
		uService.crearUsuario(usuario);
	}
	
	// Buscar usuario por ID (CodUsuario)
    @GetMapping("/{id}")
    public ResponseEntity<Usuario> buscarUsuarioPorId(@PathVariable Integer id) {
        Usuario usuario = usuarioService.buscarUsuario(id);
        if (usuario != null) {
            return new ResponseEntity<>(usuario, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Buscar usuario por DNI
    @GetMapping("/dni/{dniUsuario}")
    public ResponseEntity<Usuario> buscarUsuarioPorDni(@PathVariable int dniUsuario) {
        Usuario usuario = usuarioService.buscarUsuarioPorDni(dniUsuario);
        if (usuario != null) {
            return new ResponseEntity<>(usuario, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Actualizar usuario por DNI
    @PutMapping("/dni/{dniUsuario}")
    public ResponseEntity<Usuario> actualizarUsuarioPorDni(
            @PathVariable int dniUsuario, 
            @RequestBody Usuario usuarioActualizado) {

        Usuario usuario = usuarioService.actualizarUsuarioPorDni(dniUsuario, usuarioActualizado);
        if (usuario != null) {
            return new ResponseEntity<>(usuario, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Borrar usuario por DNI
    @DeleteMapping("/dni/{dniUsuario}")
    public ResponseEntity<Void> borrarUsuarioPorDni(@PathVariable int dniUsuario) {
        Usuario usuario = usuarioService.buscarUsuarioPorDni(dniUsuario);
        if (usuario != null) {
            usuarioService.borrarUsuarioPorDni(dniUsuario);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }

}
